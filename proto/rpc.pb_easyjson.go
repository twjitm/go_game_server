// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package proto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDd0a04abDecodeGoGameServerProto(in *jlexer.Lexer, out *rpcSendMessageServer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd0a04abEncodeGoGameServerProto(out *jwriter.Writer, in rpcSendMessageServer) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v rpcSendMessageServer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd0a04abEncodeGoGameServerProto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rpcSendMessageServer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd0a04abEncodeGoGameServerProto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rpcSendMessageServer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd0a04abDecodeGoGameServerProto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rpcSendMessageServer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd0a04abDecodeGoGameServerProto(l, v)
}
func easyjsonDd0a04abDecodeGoGameServerProto1(in *jlexer.Lexer, out *rpcSendMessageClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd0a04abEncodeGoGameServerProto1(out *jwriter.Writer, in rpcSendMessageClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v rpcSendMessageClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd0a04abEncodeGoGameServerProto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rpcSendMessageClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd0a04abEncodeGoGameServerProto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rpcSendMessageClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd0a04abDecodeGoGameServerProto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rpcSendMessageClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd0a04abDecodeGoGameServerProto1(l, v)
}
func easyjsonDd0a04abDecodeGoGameServerProto2(in *jlexer.Lexer, out *rpcClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd0a04abEncodeGoGameServerProto2(out *jwriter.Writer, in rpcClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v rpcClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd0a04abEncodeGoGameServerProto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rpcClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd0a04abEncodeGoGameServerProto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rpcClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd0a04abDecodeGoGameServerProto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rpcClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd0a04abDecodeGoGameServerProto2(l, v)
}
func easyjsonDd0a04abDecodeGoGameServerProto3(in *jlexer.Lexer, out *UnimplementedRpcServer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd0a04abEncodeGoGameServerProto3(out *jwriter.Writer, in UnimplementedRpcServer) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnimplementedRpcServer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd0a04abEncodeGoGameServerProto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnimplementedRpcServer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd0a04abEncodeGoGameServerProto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnimplementedRpcServer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd0a04abDecodeGoGameServerProto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnimplementedRpcServer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd0a04abDecodeGoGameServerProto3(l, v)
}
