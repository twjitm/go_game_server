// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: rpc.proto

package message

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x0a, 0x6d, 0x63, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x87, 0x01,
	0x0a, 0x03, 0x52, 0x70, 0x63, 0x12, 0x49, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x35, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x11, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_rpc_proto_goTypes = []interface{}{
	(*GetUserInfoRequest)(nil), // 0: message.GetUserInfoRequest
	(*ChatInfo)(nil),           // 1: message.ChatInfo
	(*GetUserInfoReply)(nil),   // 2: message.GetUserInfoReply
}
var file_rpc_proto_depIdxs = []int32{
	0, // 0: message.Rpc.GatUserInfo:input_type -> message.GetUserInfoRequest
	1, // 1: message.Rpc.SendMessage:input_type -> message.ChatInfo
	2, // 2: message.Rpc.GatUserInfo:output_type -> message.GetUserInfoReply
	1, // 3: message.Rpc.SendMessage:output_type -> message.ChatInfo
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	file_mcmd_proto_init()
	file_message_proto_init()
	file_entity_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcClient is the client API for Rpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcClient interface {
	GatUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (Rpc_GatUserInfoClient, error)
	SendMessage(ctx context.Context, in *ChatInfo, opts ...grpc.CallOption) (*ChatInfo, error)
}

type rpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcClient(cc grpc.ClientConnInterface) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) GatUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (Rpc_GatUserInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Rpc_serviceDesc.Streams[0], "/message.Rpc/GatUserInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcGatUserInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rpc_GatUserInfoClient interface {
	Recv() (*GetUserInfoReply, error)
	grpc.ClientStream
}

type rpcGatUserInfoClient struct {
	grpc.ClientStream
}

func (x *rpcGatUserInfoClient) Recv() (*GetUserInfoReply, error) {
	m := new(GetUserInfoReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcClient) SendMessage(ctx context.Context, in *ChatInfo, opts ...grpc.CallOption) (*ChatInfo, error) {
	out := new(ChatInfo)
	err := c.cc.Invoke(ctx, "/message.Rpc/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServer is the server API for Rpc service.
type RpcServer interface {
	GatUserInfo(*GetUserInfoRequest, Rpc_GatUserInfoServer) error
	SendMessage(context.Context, *ChatInfo) (*ChatInfo, error)
}

// UnimplementedRpcServer can be embedded to have forward compatible implementations.
type UnimplementedRpcServer struct {
}

func (*UnimplementedRpcServer) GatUserInfo(*GetUserInfoRequest, Rpc_GatUserInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GatUserInfo not implemented")
}
func (*UnimplementedRpcServer) SendMessage(context.Context, *ChatInfo) (*ChatInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_GatUserInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RpcServer).GatUserInfo(m, &rpcGatUserInfoServer{stream})
}

type Rpc_GatUserInfoServer interface {
	Send(*GetUserInfoReply) error
	grpc.ServerStream
}

type rpcGatUserInfoServer struct {
	grpc.ServerStream
}

func (x *rpcGatUserInfoServer) Send(m *GetUserInfoReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Rpc_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.Rpc/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).SendMessage(ctx, req.(*ChatInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Rpc_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GatUserInfo",
			Handler:       _Rpc_GatUserInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
