// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

package message

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0xe2,
	0x85, 0x32, 0x20, 0xe2, 0x52, 0x3c, 0xa9, 0x79, 0x25, 0x99, 0x25, 0x95, 0x10, 0x9e, 0x51, 0x27,
	0x23, 0x17, 0x73, 0x50, 0x41, 0xb2, 0x90, 0x3b, 0x17, 0xb7, 0x7b, 0x62, 0x49, 0x68, 0x71, 0x6a,
	0x91, 0x67, 0x5e, 0x5a, 0xbe, 0x90, 0xb4, 0x1e, 0x4c, 0x93, 0x7b, 0x2a, 0x5c, 0x34, 0x28, 0xb5,
	0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x4a, 0x12, 0xbb, 0x64, 0x41, 0x4e, 0xa5, 0x12, 0x83, 0x90, 0x25,
	0x17, 0x77, 0x70, 0x6a, 0x5e, 0x8a, 0x2f, 0x44, 0x85, 0x90, 0x20, 0x5c, 0xad, 0x73, 0x46, 0x62,
	0x09, 0x48, 0xa1, 0x14, 0xa6, 0x90, 0x12, 0x83, 0x06, 0xa3, 0x01, 0xa3, 0x93, 0xc0, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x12,
	0x1b, 0xd8, 0x91, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x2f, 0x3a, 0x84, 0xd7, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcClient is the client API for Rpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcClient interface {
	GatUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoReply, error)
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (Rpc_SendMessageClient, error)
}

type rpcClient struct {
	cc *grpc.ClientConn
}

func NewRpcClient(cc *grpc.ClientConn) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) GatUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoReply, error) {
	out := new(GetUserInfoReply)
	err := c.cc.Invoke(ctx, "/message.Rpc/GatUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (Rpc_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Rpc_serviceDesc.Streams[0], "/message.Rpc/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcSendMessageClient{stream}
	return x, nil
}

type Rpc_SendMessageClient interface {
	Send(*ChatInfo) error
	Recv() (*ChatInfo, error)
	grpc.ClientStream
}

type rpcSendMessageClient struct {
	grpc.ClientStream
}

func (x *rpcSendMessageClient) Send(m *ChatInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcSendMessageClient) Recv() (*ChatInfo, error) {
	m := new(ChatInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RpcServer is the server API for Rpc service.
type RpcServer interface {
	GatUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoReply, error)
	SendMessage(Rpc_SendMessageServer) error
}

// UnimplementedRpcServer can be embedded to have forward compatible implementations.
type UnimplementedRpcServer struct {
}

func (*UnimplementedRpcServer) GatUserInfo(ctx context.Context, req *GetUserInfoRequest) (*GetUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatUserInfo not implemented")
}
func (*UnimplementedRpcServer) SendMessage(srv Rpc_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_GatUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GatUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.Rpc/GatUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GatUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).SendMessage(&rpcSendMessageServer{stream})
}

type Rpc_SendMessageServer interface {
	Send(*ChatInfo) error
	Recv() (*ChatInfo, error)
	grpc.ServerStream
}

type rpcSendMessageServer struct {
	grpc.ServerStream
}

func (x *rpcSendMessageServer) Send(m *ChatInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcSendMessageServer) Recv() (*ChatInfo, error) {
	m := new(ChatInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GatUserInfo",
			Handler:    _Rpc_GatUserInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _Rpc_SendMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
