// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package proto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAc8cc59dDecodeGoGameServerProto(in *jlexer.Lexer, out *UserInfoList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]*UserInfo, 0, 8)
					} else {
						out.List = []*UserInfo{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *UserInfo
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(UserInfo)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.List = append(out.List, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAc8cc59dEncodeGoGameServerProto(out *jwriter.Writer, in UserInfoList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.List) != 0 {
		const prefix string = ",\"list\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.List {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInfoList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAc8cc59dEncodeGoGameServerProto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInfoList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAc8cc59dEncodeGoGameServerProto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInfoList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAc8cc59dDecodeGoGameServerProto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInfoList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAc8cc59dDecodeGoGameServerProto(l, v)
}
func easyjsonAc8cc59dDecodeGoGameServerProto1(in *jlexer.Lexer, out *UserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]*Address, 0, 8)
					} else {
						out.Addresses = []*Address{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Address
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Address)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Addresses = append(out.Addresses, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAc8cc59dEncodeGoGameServerProto1(out *jwriter.Writer, in UserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Phone != "" {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phone))
	}
	if len(in.Addresses) != 0 {
		const prefix string = ",\"addresses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Addresses {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAc8cc59dEncodeGoGameServerProto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAc8cc59dEncodeGoGameServerProto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAc8cc59dDecodeGoGameServerProto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAc8cc59dDecodeGoGameServerProto1(l, v)
}
func easyjsonAc8cc59dDecodeGoGameServerProto2(in *jlexer.Lexer, out *ChatInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "type":
			out.Type = int32(in.Int32())
		case "context":
			if in.IsNull() {
				in.Skip()
				out.Context = nil
			} else {
				if out.Context == nil {
					out.Context = new(ChatContext)
				}
				(*out.Context).UnmarshalEasyJSON(in)
			}
		case "time":
			out.Time = int64(in.Int64())
		case "sender":
			out.Sender = int64(in.Int64())
		case "receiver":
			out.Receiver = int64(in.Int64())
		case "topic":
			out.Topic = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAc8cc59dEncodeGoGameServerProto2(out *jwriter.Writer, in ChatInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Type))
	}
	if in.Context != nil {
		const prefix string = ",\"context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Context).MarshalEasyJSON(out)
	}
	if in.Time != 0 {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	if in.Sender != 0 {
		const prefix string = ",\"sender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Sender))
	}
	if in.Receiver != 0 {
		const prefix string = ",\"receiver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Receiver))
	}
	if in.Topic != 0 {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Topic))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAc8cc59dEncodeGoGameServerProto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAc8cc59dEncodeGoGameServerProto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAc8cc59dDecodeGoGameServerProto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAc8cc59dDecodeGoGameServerProto2(l, v)
}
func easyjsonAc8cc59dDecodeGoGameServerProto3(in *jlexer.Lexer, out *ChatContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int64(in.Int64())
		case "context":
			out.Context = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAc8cc59dEncodeGoGameServerProto3(out *jwriter.Writer, in ChatContext) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Type))
	}
	if in.Context != "" {
		const prefix string = ",\"context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Context))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatContext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAc8cc59dEncodeGoGameServerProto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatContext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAc8cc59dEncodeGoGameServerProto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatContext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAc8cc59dDecodeGoGameServerProto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatContext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAc8cc59dDecodeGoGameServerProto3(l, v)
}
func easyjsonAc8cc59dDecodeGoGameServerProto4(in *jlexer.Lexer, out *BaseInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAc8cc59dEncodeGoGameServerProto4(out *jwriter.Writer, in BaseInfo) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAc8cc59dEncodeGoGameServerProto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAc8cc59dEncodeGoGameServerProto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAc8cc59dDecodeGoGameServerProto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAc8cc59dDecodeGoGameServerProto4(l, v)
}
func easyjsonAc8cc59dDecodeGoGameServerProto5(in *jlexer.Lexer, out *Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "street":
			out.Street = string(in.String())
		case "city":
			out.City = string(in.String())
		case "state":
			out.State = string(in.String())
		case "zip":
			out.Zip = string(in.String())
		case "isShippingAddress":
			out.IsShippingAddress = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAc8cc59dEncodeGoGameServerProto5(out *jwriter.Writer, in Address) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Street != "" {
		const prefix string = ",\"street\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Street))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	if in.Zip != "" {
		const prefix string = ",\"zip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Zip))
	}
	if in.IsShippingAddress {
		const prefix string = ",\"isShippingAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsShippingAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Address) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAc8cc59dEncodeGoGameServerProto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Address) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAc8cc59dEncodeGoGameServerProto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Address) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAc8cc59dDecodeGoGameServerProto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Address) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAc8cc59dDecodeGoGameServerProto5(l, v)
}
